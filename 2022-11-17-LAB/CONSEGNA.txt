CONSEGNA

Si crei un progetto con le classi allegate sotto, che avevamo scritto per implementare delle carte da poker. Le si inserisca dentro un package it.univr.cards. Quindi le si modifichi come segue.

• Si trasformi il metodo equals() di Card in quello atteso dalla libreria Collections, cioè in boolean equals(Object other).

• Si aggiunga alla classe Card un metodo int hashCode() non banale.

• Si faccia implementare a Card l'interfaccia di libreria Comparable<Card>.

• Si scriva una classe di prova MainCards, dentro il package it.univr, che crea un HashSet<Card> e un TreeSet<Card>, inizialmente vuoti. Poi riempie l'HashSet con 100 milioni di carte casuali e stampa il tempo richiesto per tale operazione (si sfrutti il metodo System.currentTimeMillis()). Successivamente riempie il TreeSet con 100 milioni di carte casuali e stampa il tempo richiesto per tale operazione. Infine stampa la dimensione dell'HashSet, la dimensione del TreeSet e l'equals() fra l'HashSet e il TreeSet. È più veloce l'HashSet o il TreeSet? I due insiemi risultano equals()? Si modifichi l'hashCode() della classe Card in modo da renderlo banale (fategli ritornare una costante). Adesso è più veloce l'HashSet o il TreeSet?

• Si crei una classe Deck che implementa un mazzo di carte da poker, tutte diverse, completando il seguente codice (altri metodi e i campi devono essere dichiarati private)

    package it.univr.cards;
    
    import java.util.SortedSet;
    import java.util.TreeSet;
    
    public class Deck {
      ...
    
      /**
       * Costruisce un mazzo di size carte, tutte diverse, il cui valore è da min in su.
       */
      public Deck(int size, Value min) { ... }
    
      /**
       * Restituisce una stringa che descrive le carte in questo mazzo, costruita come la loro stampa in sequenza crescente per valore.
       */
      public String toString() { ... }
    
      /**
       * Restituisce la carta più alta di questo mazzo (senza rimuoverla).
       */
      public Card best() { ... }
    
      /**
       * Rimuove la carta più alta di questo mazzo.
       */
      public void removeBest() { ... }
    }

• Si verifichi che l'esecuzione di MainDeck stampa qualcosa del tipo:
    deck1: [7♠, 10♦, J♠, Q♣, K♣]
    best of deck1: K♣
    deck1 without K♣: [7♠, 10♦, J♠, Q♣]
    
    deck2: [5♠, 8♠, 9♣, J♣, 1♠]
    best of deck2: 1♠
    
    deck3: [2♠, 2♣, 2♦, 2♥, 3♠, 3♣, 3♦, 3♥, 4♠, 4♣, 4♦, ... , K♠, K♣, K♦, K♥, 1♠, 1♣, 1♦, 1♥]
    best of deck3: 1♥